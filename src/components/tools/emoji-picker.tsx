"use client";

import React, { useState, useMemo } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Copy, Download, FileText, Smile, Search, Grid, List } from "lucide-react";

export function EmojiPicker() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [selectedEmojis, setSelectedEmojis] = useState<string[]>([]);

  // Base de donn√©es d'√©mojis organis√©s par cat√©gories
  const emojiCategories = {
    all: "Tous",
    faces: "Visages",
    gestures: "Gestes",
    people: "Personnes",
    animals: "Animaux",
    food: "Nourriture",
    travel: "Voyage",
    activities: "Activit√©s",
    objects: "Objets",
    symbols: "Symboles",
    flags: "Drapeaux",
    nature: "Nature"
  };

  const emojis = {
    faces: [
      "üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "ü§£", "üòÇ", "üôÇ", "üôÉ",
      "üòâ", "üòä", "üòá", "ü•∞", "üòç", "ü§©", "üòò", "üòó", "üòö", "üòô",
      "üòã", "üòõ", "üòú", "ü§™", "üòù", "ü§ë", "ü§ó", "ü§≠", "ü§´", "ü§î",
      "ü§ê", "ü§®", "üòê", "üòë", "üò∂", "üòè", "üòí", "üôÑ", "üò¨", "ü§•",
      "üòî", "üò™", "ü§§", "üò¥", "üò∑", "ü§í", "ü§ï", "ü§¢", "ü§Æ", "ü§ß",
      "ü•µ", "ü•∂", "ü•¥", "üòµ", "ü§Ø", "ü§†", "ü•≥", "üòé", "ü§ì", "üßê"
    ],
    gestures: [
      "üëã", "ü§ö", "üñê", "‚úã", "üññ", "üëå", "ü§è", "‚úå", "ü§û", "ü§ü",
      "ü§ò", "ü§ô", "üëà", "üëâ", "üëÜ", "üñï", "üëá", "‚òù", "üëç", "üëé",
      "üëä", "‚úä", "ü§õ", "ü§ú", "üëè", "üôå", "üëê", "ü§≤", "ü§ù", "üôè",
      "‚úç", "üíÖ", "ü§≥", "üí™", "ü¶æ", "ü¶ø", "ü¶µ", "ü¶∂", "üëÇ", "ü¶ª",
      "üëÉ", "üß†", "ü¶∑", "ü¶¥", "üëÄ", "üëÅ", "üëÖ", "üëÑ", "üíã", "ü©∏"
    ],
    people: [
      "üë∂", "üßí", "üë¶", "üëß", "üßë", "üë®", "üë©", "üßì", "üë¥", "üëµ",
      "üë§", "üë•", "ü´Ç", "üë™", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "üë®‚Äçüë®‚Äçüëß", "üë©‚Äçüë©‚Äçüëß", "üë®‚Äçüëß", "üë©‚Äçüëß", "üë®‚Äçüëß‚Äçüë¶",
      "üë©‚Äçüëß‚Äçüë¶", "üë®‚Äçüë®‚Äçüëß‚Äçüë¶", "üë©‚Äçüë©‚Äçüëß‚Äçüë¶", "üë®‚Äçüë®‚Äçüë¶", "üë©‚Äçüë©‚Äçüë¶", "üë®‚Äçüë¶", "üë©‚Äçüë¶", "üë®‚Äçüë¶‚Äçüë¶", "üë©‚Äçüë¶‚Äçüë¶", "üë®‚Äçüëß‚Äçüëß",
      "üë©‚Äçüëß‚Äçüëß", "üë®‚Äçüë®‚Äçüëß", "üë©‚Äçüë©‚Äçüëß", "üë®‚Äçüëß", "üë©‚Äçüëß", "üë®‚Äçüëß‚Äçüë¶", "üë©‚Äçüëß‚Äçüë¶", "üë®‚Äçüë®‚Äçüëß‚Äçüë¶", "üë©‚Äçüë©‚Äçüëß‚Äçüë¶", "üë®‚Äçüë®‚Äçüë¶",
      "üë©‚Äçüë©‚Äçüë¶", "üë®‚Äçüë¶", "üë©‚Äçüë¶", "üë®‚Äçüë¶‚Äçüë¶", "üë©‚Äçüë¶‚Äçüë¶", "üë®‚Äçüëß‚Äçüëß", "üë©‚Äçüëß‚Äçüëß", "üë®‚Äçüë®‚Äçüëß", "üë©‚Äçüë©‚Äçüëß", "üë®‚Äçüëß"
    ],
    animals: [
      "üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº", "üê®", "üêØ",
      "ü¶Å", "üêÆ", "üê∑", "üê∏", "üêµ", "üôà", "üôâ", "üôä", "üêí", "ü¶ç",
      "ü¶ß", "üêï", "üê©", "ü¶Æ", "üêï‚Äçü¶∫", "üêà", "üêà‚Äç‚¨õ", "ü¶Ñ", "üêé", "ü¶ì",
      "ü¶å", "üêÇ", "üêÉ", "üêÑ", "üê™", "üê´", "ü¶ô", "ü¶í", "üêò", "ü¶è",
      "ü¶õ", "üêê", "üêë", "üêè", "üêé", "ü¶ì", "ü¶å", "üêÇ", "üêÉ", "üêÑ",
      "üê™", "üê´", "ü¶ô", "ü¶í", "üêò", "ü¶è", "ü¶õ", "üêê", "üêë", "üêè"
    ],
    food: [
      "üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçá", "üçì", "ü´ê", "üçà",
      "üçí", "üçë", "ü•≠", "üçç", "ü••", "ü•ù", "üçÖ", "üçÜ", "ü•ë", "ü•¶",
      "ü•¨", "ü•í", "üå∂", "ü´ë", "üåΩ", "ü•ï", "ü´í", "üßÑ", "üßÖ", "ü•î",
      "üç†", "ü•ê", "ü•ñ", "üçû", "ü•®", "ü•Ø", "üßÄ", "ü•ö", "üç≥", "üßà",
      "ü•û", "üßá", "ü•ì", "ü•©", "üçó", "üçñ", "ü¶¥", "üå≠", "üçî", "üçü"
    ],
    travel: [
      "üöó", "üöï", "üöô", "üöå", "üöé", "üèé", "üöì", "üöë", "üöí", "üöê",
      "üõª", "üöö", "üöõ", "üöú", "üèç", "üõµ", "üö≤", "üõ¥", "üõπ", "üõº",
      "üöÅ", "‚úà", "üõ©", "üõ´", "üõ¨", "ü™Ç", "üí∫", "üöÄ", "üõ∏", "üöâ",
      "üöä", "üöù", "üöû", "üöã", "üöÉ", "üöã", "üöû", "üöù", "üöÑ", "üöÖ",
      "üöà", "üöÇ", "üöÜ", "üöá", "üöä", "üöâ", "‚úà", "üõ©", "üõ´", "üõ¨"
    ],
    activities: [
      "‚öΩ", "üèÄ", "üèà", "‚öæ", "ü•é", "üéæ", "üèê", "üèâ", "üé±", "ü™Ä",
      "üèì", "üè∏", "üèí", "üèë", "ü•ç", "üèè", "ü™É", "ü•Ö", "‚õ≥", "ü™Å",
      "üèπ", "üé£", "ü§ø", "ü•ä", "ü•ã", "üéΩ", "üõπ", "üõ∑", "‚õ∏", "ü•å",
      "üéø", "‚õ∑", "üèÇ", "ü™Ç", "üèã", "ü§º", "ü§∏", "‚õπ", "ü§∫", "ü§æ",
      "üèå", "üèá", "üßò", "üèÑ", "üèä", "ü§Ω", "üèä", "üö£", "üßó", "üöµ"
    ],
    objects: [
      "‚åö", "üì±", "üì≤", "üíª", "‚å®", "üñ•", "üñ®", "üñ±", "üñ≤", "üïπ",
      "üóú", "üíΩ", "üíæ", "üíø", "üìÄ", "üìº", "üì∑", "üì∏", "üìπ", "üé•",
      "üìΩ", "üéû", "üìû", "‚òé", "üìü", "üì†", "üì∫", "üìª", "üéô", "üéö",
      "üéõ", "üß≠", "‚è±", "‚è≤", "‚è∞", "üï∞", "‚åõ", "‚è≥", "üì°", "üîã",
      "üîå", "üí°", "üî¶", "üïØ", "ü™î", "üßØ", "üõ¢", "üí∏", "üíµ", "üí¥"
    ],
    symbols: [
      "‚ù§", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "ü§ç", "ü§é", "üíî",
      "‚ù£", "üíï", "üíû", "üíì", "üíó", "üíñ", "üíò", "üíù", "üíü", "‚òÆ",
      "‚úù", "‚ò™", "üïâ", "‚ò∏", "‚ú°", "üîØ", "üïé", "‚òØ", "‚ò¶", "üõê",
      "‚õé", "‚ôà", "‚ôâ", "‚ôä", "‚ôã", "‚ôå", "‚ôç", "‚ôé", "‚ôè", "‚ôê",
      "‚ôë", "‚ôí", "‚ôì", "üÜî", "‚öõ", "üâë", "‚ò¢", "‚ò£", "üì¥", "üì≥"
    ],
    flags: [
      "üèÅ", "üö©", "üéå", "üè¥", "üè≥", "üè≥Ô∏è‚Äçüåà", "üè≥Ô∏è‚Äç‚ößÔ∏è", "üè¥‚Äç‚ò†Ô∏è", "üá¶üá®", "üá¶üá©",
      "üá¶üá™", "üá¶üá´", "üá¶üá¨", "üá¶üáÆ", "üá¶üá±", "üá¶üá≤", "üá¶üá¥", "üá¶üá∂", "üá¶üá∑", "üá¶üá∏",
      "üá¶üáπ", "üá¶üá∫", "üá¶üáº", "üá¶üáΩ", "üá¶üáø", "üáßüá¶", "üáßüáß", "üáßüá©", "üáßüá™", "üáßüá´",
      "üáßüá¨", "üáßüá≠", "üáßüáÆ", "üáßüáØ", "üáßüá±", "üáßüá≤", "üáßüá≥", "üáßüá¥", "üáßüá∂", "üáßüá∑",
      "üáßüá∏", "üáßüáπ", "üáßüáª", "üáßüáº", "üáßüáæ", "üáßüáø", "üá®üá¶", "üá®üá®", "üá®üá©", "üá®üá´"
    ],
    nature: [
      "üå±", "üåø", "üçÄ", "üåæ", "üåµ", "üå≤", "üå≥", "üå¥", "üå∞", "üå±",
      "üåø", "üçÄ", "üåæ", "üåµ", "üå≤", "üå≥", "üå¥", "üå∞", "üå±", "üåø",
      "üçÄ", "üåæ", "üåµ", "üå≤", "üå≥", "üå¥", "üå∞", "üå±", "üåø", "üçÄ",
      "üåæ", "üåµ", "üå≤", "üå≥", "üå¥", "üå∞", "üå±", "üåø", "üçÄ", "üåæ",
      "üåµ", "üå≤", "üå≥", "üå¥", "üå∞", "üå±", "üåø", "üçÄ", "üåæ", "üåµ"
    ]
  };

  // Filtrer les √©mojis selon la recherche et la cat√©gorie
  const filteredEmojis = useMemo(() => {
    let emojiList: string[] = [];
    
    if (selectedCategory === "all") {
      emojiList = Object.values(emojis).flat();
    } else {
      emojiList = emojis[selectedCategory as keyof typeof emojis] || [];
    }
    
    if (searchTerm) {
      // Recherche simple par caract√®re (pas de traduction des noms)
      emojiList = emojiList.filter(emoji => 
        emoji.includes(searchTerm) || 
        emoji.charCodeAt(0).toString().includes(searchTerm)
      );
    }
    
    return emojiList;
  }, [selectedCategory, searchTerm]);

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
    } catch (err) {
      console.error('Erreur lors de la copie:', err);
    }
  };

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const addToSelection = (emoji: string) => {
    setSelectedEmojis(prev => [...prev, emoji]);
  };

  const removeFromSelection = (index: number) => {
    setSelectedEmojis(prev => prev.filter((_, i) => i !== index));
  };

  const clearSelection = () => {
    setSelectedEmojis([]);
  };

  const copySelection = () => {
    copyToClipboard(selectedEmojis.join(''));
  };

  const downloadSelection = () => {
    downloadFile(selectedEmojis.join(''), 'emojis.txt', 'text/plain');
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Smile className="h-5 w-5" />
            S√©lecteur d'√âmojis
          </CardTitle>
          <CardDescription>
            Parcourez et s√©lectionnez des √©mojis et ic√¥nes pour vos projets
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Contr√¥les */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Recherche</label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Rechercher un √©moji..."
                  className="pl-10"
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Cat√©gorie</label>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full p-2 border rounded-md bg-background"
              >
                {Object.entries(emojiCategories).map(([key, name]) => (
                  <option key={key} value={key}>
                    {name}
                  </option>
                ))}
              </select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Affichage</label>
              <div className="flex gap-2">
                <Button
                  variant={viewMode === "grid" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setViewMode("grid")}
                >
                  <Grid className="h-4 w-4" />
                </Button>
                <Button
                  variant={viewMode === "list" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setViewMode("list")}
                >
                  <List className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>

          {/* Grille d'√©mojis */}
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">
                √âmojis ({filteredEmojis.length})
              </label>
            </div>
            
            <div className={`grid gap-2 p-4 border rounded-md max-h-[400px] overflow-auto ${
              viewMode === "grid" 
                ? "grid-cols-8 sm:grid-cols-12 md:grid-cols-16 lg:grid-cols-20" 
                : "grid-cols-1"
            }`}>
              {filteredEmojis.map((emoji, index) => (
                <button
                  key={index}
                  onClick={() => addToSelection(emoji)}
                  className={`p-2 rounded-md hover:bg-accent transition-colors text-2xl ${
                    viewMode === "list" ? "flex items-center gap-2" : ""
                  }`}
                  title={`Cliquer pour ajouter: ${emoji}`}
                >
                  {emoji}
                  {viewMode === "list" && (
                    <span className="text-sm text-muted-foreground">
                      {emoji}
                    </span>
                  )}
                </button>
              ))}
            </div>
          </div>

          {/* S√©lection */}
          {selectedEmojis.length > 0 && (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <label className="text-sm font-medium">
                  S√©lection ({selectedEmojis.length})
                </label>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={copySelection}
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={downloadSelection}
                  >
                    <Download className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={clearSelection}
                  >
                    Effacer
                  </Button>
                </div>
              </div>
              
              <div className="p-4 border rounded-md bg-muted">
                <div className="flex flex-wrap gap-2">
                  {selectedEmojis.map((emoji, index) => (
                    <button
                      key={index}
                      onClick={() => removeFromSelection(index)}
                      className="p-1 rounded hover:bg-background transition-colors text-2xl"
                      title="Cliquer pour supprimer"
                    >
                      {emoji}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="flex flex-wrap gap-2">
            {selectedEmojis.length > 0 && (
              <>
                <Button
                  onClick={copySelection}
                  className="flex items-center gap-2"
                >
                  <Copy className="h-4 w-4" />
                  Copier la s√©lection
                </Button>
                <Button
                  variant="outline"
                  onClick={downloadSelection}
                  className="flex items-center gap-2"
                >
                  <Download className="h-4 w-4" />
                  T√©l√©charger
                </Button>
              </>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Aide */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Smile className="h-5 w-5" />
            Guide d'utilisation
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <h4 className="font-semibold mb-2">Navigation</h4>
              <ul className="space-y-1 text-muted-foreground">
                <li>‚Ä¢ Utilisez les cat√©gories pour filtrer</li>
                <li>‚Ä¢ Recherchez par caract√®re ou code</li>
                <li>‚Ä¢ Basculez entre vue grille et liste</li>
                <li>‚Ä¢ Cliquez sur un √©moji pour l'ajouter</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2">S√©lection</h4>
              <ul className="space-y-1 text-muted-foreground">
                <li>‚Ä¢ Cliquez sur un √©moji pour l'ajouter</li>
                <li>‚Ä¢ Cliquez sur un √©moji s√©lectionn√© pour le supprimer</li>
                <li>‚Ä¢ Copiez ou t√©l√©chargez votre s√©lection</li>
                <li>‚Ä¢ Utilisez "Effacer" pour vider la s√©lection</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2">Cat√©gories</h4>
              <ul className="space-y-1 text-muted-foreground">
                <li>‚Ä¢ <strong>Visages</strong>: Expressions et √©motions</li>
                <li>‚Ä¢ <strong>Gestes</strong>: Mains et signes</li>
                <li>‚Ä¢ <strong>Animaux</strong>: Cr√©atures et animaux</li>
                <li>‚Ä¢ <strong>Nourriture</strong>: Aliments et boissons</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2">Utilisation</h4>
              <ul className="space-y-1 text-muted-foreground">
                <li>‚Ä¢ Parfait pour les messages et documents</li>
                <li>‚Ä¢ Id√©al pour les interfaces utilisateur</li>
                <li>‚Ä¢ Utile pour les pr√©sentations</li>
                <li>‚Ä¢ Compatible avec tous les syst√®mes</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
